{"version":3,"sources":["FormControlLabel.tsx"],"names":["FormControlLabel","ref","children","props","formControlContext","combinedProps","_ref","React","useRef","isDisabled","isReadOnly","isInvalid","astrickColor","reslovedProps","requiredAsterisk","accessibilityHidden","accessibilityRole","mergedRef","useEffect","current","htmlFor","nativeID","labelId","isRequired"],"mappings":"wbAAA,qDACA,iEACA,mEACA,gDACA,2DAEA,qC,kJAGA,GAAMA,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,OAEvBC,GAFuB,CAGpB,IAFDC,CAAAA,QAEC,OAFDA,QAEC,CAFYC,KAEZ,2DACH,GAAMC,CAAAA,kBAAkB,CAAG,2CAA3B,CACA,GAAMC,CAAAA,aAAa,CAAG,kCAAuBD,kBAAvB,CAA2CD,KAA3C,CAAtB,CACA,GAAMG,CAAAA,IAAI,CAAGC,eAAMC,MAAN,CAA+B,IAA/B,CAAb,CAHG,wBAIwC,sCACzC,kBADyC,CAEzCH,aAFyC,CAGzC,CACEI,UAAU,CAAEJ,aAAa,CAACI,UAD5B,CAEEC,UAAU,CAAEL,aAAa,CAACK,UAF5B,CAGEC,SAAS,CAAEN,aAAa,CAACM,SAH3B,CAHyC,CAJxC,CAIKC,YAJL,qBAIKA,YAJL,CAIsBC,aAJtB,6EAeH,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,SACvB,8BAAC,aAAD,EACE,IAAI,CAAE,CACJC,mBAAmB,CAAE,IADjB,CAGJC,iBAAiB,CAAE,cAHf,CADR,CAME,KAAK,CAAEJ,YANT,iFADuB,EAAzB,CAYA,GAAMK,CAAAA,SAAS,CAAG,qBAAU,CAACX,IAAD,CAAOL,GAAP,CAAV,CAAlB,CACAM,eAAMW,SAAN,CAAgB,UAAM,CACpB,GAAIZ,IAAI,CAACa,OAAT,CAAkB,CAEhB,GAAIhB,KAAK,CAACiB,OAAV,CAAmB,CACjBd,IAAI,CAACa,OAAL,CAAaC,OAAb,CAAuBjB,KAAK,CAACiB,OAA7B,CACD,CAFD,IAEO,IAAIP,aAAJ,QAAIA,aAAa,CAAEQ,QAAnB,CAA6B,CAClCf,IAAI,CAACa,OAAL,CAAaC,OAAb,CAAuBP,aAAa,CAACQ,QAArC,CACD,CACF,CACF,CATD,CASG,CAACR,aAAD,cAACA,aAAa,CAAEQ,QAAhB,CAA0BlB,KAAK,CAACiB,OAAhC,CATH,EAWA,MACE,8BAAC,YAAD,wBACE,aAAa,CAAC,KADhB,CAEE,cAAc,CAAC,YAFjB,CAGE,IAAI,CAAE,CAEJJ,iBAAiB,CAAE,OAFf,CAHR,EAOMH,aAPN,EAQE,QAAQ,CAAEA,aAAF,cAAEA,aAAa,CAAES,OAR3B,CASE,GAAG,CAAEL,SATP,8EAWGf,QAXH,CAYG,CAAAW,aAAa,MAAb,QAAAA,aAAa,CAAEU,UAAf,GAA6BT,gBAAgB,EAZhD,CADF,CAgBD,CA1DD,C,aA2De,gBAAK,sBAAWd,gBAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport Text from '../../primitives/Text';\nimport { useFormControlContext } from './useFormControl';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IFormControlLabelProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { combineContextAndProps } from '../../../utils';\n\nconst FormControlLabel = (\n  { children, ...props }: IFormControlLabelProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const combinedProps = combineContextAndProps(formControlContext, props);\n  const _ref = React.useRef<HTMLLabelElement>(null);\n  const { astrickColor, ...reslovedProps } = usePropsResolution(\n    'FormControlLabel',\n    combinedProps,\n    {\n      isDisabled: combinedProps.isDisabled,\n      isReadOnly: combinedProps.isReadOnly,\n      isInvalid: combinedProps.isInvalid,\n      // isRequired: combinedProps.isRequired,\n    }\n  );\n\n  const requiredAsterisk = () => (\n    <Text\n      _web={{\n        accessibilityHidden: true,\n        //@ts-ignore\n        accessibilityRole: 'presentation',\n      }}\n      color={astrickColor}\n    >\n      *\n    </Text>\n  );\n  const mergedRef = mergeRefs([_ref, ref]);\n  React.useEffect(() => {\n    if (_ref.current) {\n      // RN web doesn't support htmlFor for Label element yet\n      if (props.htmlFor) {\n        _ref.current.htmlFor = props.htmlFor;\n      } else if (reslovedProps?.nativeID) {\n        _ref.current.htmlFor = reslovedProps.nativeID;\n      }\n    }\n  }, [reslovedProps?.nativeID, props.htmlFor]);\n\n  return (\n    <Box\n      flexDirection=\"row\"\n      justifyContent=\"flex-start\"\n      _web={{\n        //@ts-ignore\n        accessibilityRole: 'label',\n      }}\n      {...reslovedProps}\n      nativeID={reslovedProps?.labelId}\n      ref={mergedRef}\n    >\n      {children}\n      {reslovedProps?.isRequired && requiredAsterisk()}\n    </Box>\n  );\n};\nexport default memo(forwardRef(FormControlLabel));\n"]}