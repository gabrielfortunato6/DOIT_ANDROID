{"version":3,"sources":["FormControlHelperText.tsx"],"names":["FormControlHelperText","props","ref","formControlContext","combinedProps","resolvedProps","isDisabled","isReadOnly","isInvalid","React","useEffect","setHasHelpText","feedbackId"],"mappings":"wUAAA,qDACA,iEACA,2DACA,gDAEA,2EACA,qC,uJAEA,GAAMA,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAC5BC,KAD4B,CAE5BC,GAF4B,CAGzB,CACH,GAAMC,CAAAA,kBAAkB,CAAG,2CAA3B,CACA,GAAMC,CAAAA,aAAa,CAAG,kCAAuBD,kBAAvB,CAA2CF,KAA3C,CAAtB,CACA,GAAMI,CAAAA,aAAa,CAAG,sCACpB,uBADoB,CAEpBD,aAFoB,CAGpB,CACEE,UAAU,CAAEF,aAAa,CAACE,UAD5B,CAEEC,UAAU,CAAEH,aAAa,CAACG,UAF5B,CAGEC,SAAS,CAAEJ,aAAa,CAACI,SAH3B,CAHoB,CAAtB,CAWAC,eAAMC,SAAN,CAAgB,UAAM,CACpBL,aAAa,MAAb,QAAAA,aAAa,CAAEM,cAAf,CAA8B,IAA9B,EACA,MAAO,WAAM,CACXN,aAAa,MAAb,QAAAA,aAAa,CAAEM,cAAf,CAA8B,KAA9B,EACD,CAFD,CAGD,CALD,EAOA,GAAI,iDAAsBV,KAAtB,CAAJ,CAAkC,CAChC,MAAO,KAAP,CACD,CAED,MACE,8BAAC,YAAD,0BAASI,aAAT,EAAwB,QAAQ,CAAEA,aAAF,cAAEA,aAAa,CAAEO,UAAjD,CAA6D,GAAG,CAAEV,GAAlE,8EADF,CAGD,CA/BD,C,aAiCe,gBAAK,sBAAWF,qBAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useFormControlContext } from './useFormControl';\nimport type { IFormControlHelperTextProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps } from '../../../utils';\n\nconst FormControlHelperText = (\n  props: IFormControlHelperTextProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const combinedProps = combineContextAndProps(formControlContext, props);\n  const resolvedProps = usePropsResolution(\n    'FormControlHelperText',\n    combinedProps,\n    {\n      isDisabled: combinedProps.isDisabled,\n      isReadOnly: combinedProps.isReadOnly,\n      isInvalid: combinedProps.isInvalid,\n      // isRequired: combinedProps.isRequired,\n    }\n  );\n\n  React.useEffect(() => {\n    resolvedProps?.setHasHelpText(true);\n    return () => {\n      resolvedProps?.setHasHelpText(false);\n    };\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box {...resolvedProps} nativeID={resolvedProps?.feedbackId} ref={ref} />\n  );\n};\n\nexport default memo(forwardRef(FormControlHelperText));\n"]}