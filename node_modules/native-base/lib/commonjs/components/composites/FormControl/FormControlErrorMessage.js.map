{"version":3,"sources":["FormControlErrorMessage.tsx"],"names":["FormControlErrorMessage","props","ref","formControlContext","combinedProps","isDisabled","isReadOnly","isInvalid","leftIcon","rightIcon","children","_text","_stack","resolvedProps","startIcon","endIcon","React","isValidElement","Children","map","child","index","cloneElement","key","useEffect","setHasFeedbackText","helpTextId"],"mappings":"wbAAA,qDACA,iEACA,6CACA,2DACA,gDAEA,2EACA,qC,yJAEA,GAAMA,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAC9BC,KAD8B,CAE9BC,GAF8B,CAG3B,CACH,GAAMC,CAAAA,kBAAkB,CAAG,2CAA3B,CACA,GAAMC,CAAAA,aAAa,CAAG,kCAAuBD,kBAAvB,CAA2CF,KAA3C,CAAtB,CAFG,wBAUC,sCAAmB,yBAAnB,CAA8CG,aAA9C,CAA6D,CAC/DC,UAAU,CAAED,aAAa,CAACC,UADqC,CAE/DC,UAAU,CAAEF,aAAa,CAACE,UAFqC,CAG/DC,SAAS,CAAEH,aAAa,CAACG,SAHsC,CAA7D,CAVD,CAIDC,QAJC,qBAIDA,QAJC,CAKDC,SALC,qBAKDA,SALC,CAMDC,QANC,qBAMDA,QANC,CAODC,KAPC,qBAODA,KAPC,CAQDC,MARC,qBAQDA,MARC,CASEC,aATF,oHAgBGC,CAAAA,SAhBH,CAgB0BD,aAhB1B,CAgBGC,SAhBH,CAgBcC,OAhBd,CAgB0BF,aAhB1B,CAgBcE,OAhBd,CAkBH,GAAIN,SAAJ,CAAe,CACbM,OAAO,CAAGN,SAAV,CACD,CACD,GAAID,QAAJ,CAAc,CACZM,SAAS,CAAGN,QAAZ,CACD,CACD,GAAIO,OAAO,EAAIC,eAAMC,cAAN,CAAqBF,OAArB,CAAf,CAA8C,CAC5CA,OAAO,CAAGC,eAAME,QAAN,CAAeC,GAAf,CACRJ,OADQ,CAER,SAACK,KAAD,CAAqBC,KAArB,CAAuC,CACrC,MAAOL,gBAAMM,YAAN,CAAmBF,KAAnB,wBACLG,GAAG,oBAAqBF,KADnB,EAEFV,KAFE,CAGFS,KAAK,CAACnB,KAHJ,EAAP,CAKD,CARO,CAAV,CAUD,CACD,GAAIa,SAAS,EAAIE,eAAMC,cAAN,CAAqBH,SAArB,CAAjB,CAAkD,CAChDA,SAAS,CAAGE,eAAME,QAAN,CAAeC,GAAf,CACVL,SADU,CAEV,SAACM,KAAD,CAAqBC,KAArB,CAAuC,CACrC,MAAOL,gBAAMM,YAAN,CAAmBF,KAAnB,wBACLG,GAAG,sBAAuBF,KADrB,EAEFV,KAFE,CAGFS,KAAK,CAACnB,KAHJ,EAAP,CAKD,CARS,CAAZ,CAUD,CAEDe,eAAMQ,SAAN,CAAgB,UAAM,CACpBX,aAAa,MAAb,QAAAA,aAAa,CAAEY,kBAAf,CAAkC,IAAlC,EACA,MAAO,WAAM,CACXZ,aAAa,MAAb,QAAAA,aAAa,CAAEY,kBAAf,CAAkC,KAAlC,EACD,CAFD,CAGD,CALD,EAOA,GAAI,iDAAsBxB,KAAtB,CAAJ,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MAAOY,CAAAA,aAAa,MAAb,EAAAA,aAAa,CAAEN,SAAf,CACL,6BAAC,YAAD,wBAAK,QAAQ,CAAEM,aAAF,cAAEA,aAAa,CAAEa,UAA9B,EAA8Cb,aAA9C,EAA6D,GAAG,CAAEX,GAAlE,8EACE,6BAAC,aAAD,0BAAYU,MAAZ,+EACGE,SADH,CAEE,6BAAC,YAAD,EAAK,KAAK,CAAEH,KAAZ,6EAAoBD,QAApB,CAFF,CAGGK,OAHH,CADF,CADK,CAQH,IARJ,CASD,CAvED,C,aAyEe,gBAAK,sBAAWf,uBAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport { HStack } from '../../primitives/Stack';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useFormControlContext } from './useFormControl';\nimport type { IFormControlErrorMessageProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps } from '../../../utils';\n\nconst FormControlErrorMessage = (\n  props: IFormControlErrorMessageProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const combinedProps = combineContextAndProps(formControlContext, props);\n  const {\n    leftIcon,\n    rightIcon,\n    children,\n    _text,\n    _stack,\n    ...resolvedProps\n  } = usePropsResolution('FormControlErrorMessage', combinedProps, {\n    isDisabled: combinedProps.isDisabled,\n    isReadOnly: combinedProps.isReadOnly,\n    isInvalid: combinedProps.isInvalid,\n    // isRequired: combinedProps.isRequired,\n  });\n  let { startIcon, endIcon } = resolvedProps;\n\n  if (rightIcon) {\n    endIcon = rightIcon;\n  }\n  if (leftIcon) {\n    startIcon = leftIcon;\n  }\n  if (endIcon && React.isValidElement(endIcon)) {\n    endIcon = React.Children.map(\n      endIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-end-icon-${index}`,\n          ..._text,\n          ...child.props,\n        });\n      }\n    );\n  }\n  if (startIcon && React.isValidElement(startIcon)) {\n    startIcon = React.Children.map(\n      startIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-start-icon-${index}`,\n          ..._text,\n          ...child.props,\n        });\n      }\n    );\n  }\n\n  React.useEffect(() => {\n    resolvedProps?.setHasFeedbackText(true);\n    return () => {\n      resolvedProps?.setHasFeedbackText(false);\n    };\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return resolvedProps?.isInvalid ? (\n    <Box nativeID={resolvedProps?.helpTextId} {...resolvedProps} ref={ref}>\n      <HStack {..._stack}>\n        {startIcon}\n        <Box _text={_text}>{children}</Box>\n        {endIcon}\n      </HStack>\n    </Box>\n  ) : null;\n};\n\nexport default memo(forwardRef(FormControlErrorMessage));\n"]}