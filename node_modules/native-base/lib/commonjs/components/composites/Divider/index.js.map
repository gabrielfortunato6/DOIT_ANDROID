{"version":3,"sources":["index.tsx"],"names":["Divider","props","ref","resolveResponsively","orientation","resolvedProps","Platform","OS","undefined"],"mappings":"wbAAA,qDACA,yCACA,2DACA,mEAEA,2E,mIAEA,GAAMA,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,CAAuBC,GAAvB,CAAqC,yBACT,sCACxC,SADwC,CAExCD,KAFwC,CAGxC,EAHwC,CAIxC,CAAEE,mBAAmB,CAAE,CAAC,WAAD,CAAvB,CAJwC,CADS,CAC3CC,WAD2C,qBAC3CA,WAD2C,CAC3BC,aAD2B,4EAQnD,GAAI,iDAAsBJ,KAAtB,CAAJ,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MACE,8BAAC,YAAD,0BACMI,aADN,EAEE,GAAG,CAAEH,GAFP,CAGE,mBAAkBE,WAHpB,CAKE,iBAAiB,CAAEE,sBAASC,EAAT,GAAgB,KAAhB,CAAwB,WAAxB,CAAsCC,SAL3D,8EADF,CASD,CApBD,C,aAsBe,gBAAK,sBAAWR,OAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Platform } from 'react-native';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport Box from './../../primitives/Box';\nimport type { IDividerProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Divider = (props: IDividerProps, ref?: any) => {\n  const { orientation, ...resolvedProps } = usePropsResolution(\n    'Divider',\n    props,\n    {},\n    { resolveResponsively: ['thickness'] }\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box\n      {...resolvedProps}\n      ref={ref}\n      aria-orientation={orientation}\n      //@ts-ignore web only role\n      accessibilityRole={Platform.OS === 'web' ? 'separator' : undefined}\n    />\n  );\n};\n\nexport default memo(forwardRef(Divider));\n"]}