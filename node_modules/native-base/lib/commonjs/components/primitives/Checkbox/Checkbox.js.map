{"version":3,"sources":["Checkbox.tsx"],"names":["Checkbox","ref","wrapperRef","props","hoverProps","isHovered","pressableProps","isPressed","focusProps","isFocused","formControlContext","combinedProps","_ref","React","useRef","mergedRef","state","defaultSelected","defaultIsChecked","isSelected","isChecked","groupState","CheckboxGroupContext","inputProps","checked","isDisabled","disabled","isInvalid","isReadOnly","isIndeterminate","icon","_interactionBox","_icon","onPress","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","resolvedProps","stylingProps","margin","layout","flexbox","position","layoutProps","nonLayoutProps","children"],"mappings":"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","sourcesContent":["import React, { useContext, memo, forwardRef } from 'react';\nimport { Pressable, IPressableProps } from '../Pressable';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Center } from '../../composites/Center';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport Box from '../Box';\nimport { mergeRefs } from './../../../utils';\nimport type { ICheckboxProps } from './types';\nimport { useToggleState } from '@react-stately/toggle';\nimport { CheckboxGroupContext } from './CheckboxGroup';\nimport { useCheckbox, useCheckboxGroupItem } from '@react-native-aria/checkbox';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { composeEventHandlers, combineContextAndProps } from '../../../utils';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport SizedIcon from './SizedIcon';\n\nconst Checkbox = ({ wrapperRef, ...props }: ICheckboxProps, ref: any) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const formControlContext = useFormControlContext();\n\n  const combinedProps = combineContextAndProps(formControlContext, props);\n\n  const _ref = React.useRef();\n  const mergedRef = mergeRefs([ref, _ref]);\n\n  const state = useToggleState({\n    ...combinedProps,\n    defaultSelected: combinedProps.defaultIsChecked,\n    isSelected: combinedProps.isChecked,\n  });\n  const groupState = useContext(CheckboxGroupContext);\n\n  // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.\n  // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,\n  // but since the checkbox won't move in and out of a group, it should be safe.\n  const { inputProps } = groupState\n    ? // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckboxGroupItem(\n        combinedProps,\n        groupState.state,\n        //@ts-ignore\n        mergedRef\n      )\n    : // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckbox(\n        combinedProps,\n        state,\n        //@ts-ignore\n        mergedRef\n      );\n\n  const {\n    checked: isChecked,\n    disabled: isDisabled,\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n  } = inputProps;\n\n  const {\n    icon,\n    _interactionBox,\n    _icon,\n    // destructuring pressable props and passing it manually\n    onPress,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('Checkbox', inputProps, {\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    isDisabled,\n    isChecked,\n    isHovered,\n    isPressed,\n    isFocused,\n  });\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.layout,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    '_text',\n  ]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(resolvedProps)) {\n    return null;\n  }\n  return (\n    <Pressable\n      {...(pressableProps as IPressableProps)}\n      onPress={onPress}\n      // alignItems=\"flex-start\"\n      //some input props\n      ref={mergeRefs([ref, wrapperRef])}\n      accessibilityRole=\"checkbox\"\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus)\n        // focusRingProps.onFocu\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur)\n        // focusRingProps.onBlur\n      )}\n    >\n      <Box {...layoutProps}>\n        <Center>\n          {/* Interaction Wrapper */}\n          <Box {..._interactionBox} p={5} w=\"100%\" height=\"100%\" zIndex={-1} />\n          {/* Checkbox */}\n          <Center {...nonLayoutProps}>\n            <SizedIcon icon={icon} _icon={_icon} isChecked={isChecked} />\n          </Center>\n        </Center>\n        {/* Label */}\n        {combinedProps.children}\n      </Box>\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(Checkbox));\n"]}